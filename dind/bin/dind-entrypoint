#!/usr/bin/env sh

function setup_public_key() {
    [ -z "${SSH_PUB_KEY}" ] && return 0

    mkdir -p /root/.ssh

    echo "${SSH_PUB_KEY}" > /root/.ssh/id_rsa.pub
    echo "${SSH_PUB_KEY}" > /root/.ssh/authorized_keys

    chmod 600 /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/id_rsa.pub
}

function authorize_ssh_host() {
    ( ssh-keyscan $(hostname) && ssh-keyscan localhost ) > ~/.ssh/known_hosts
    ( ssh-keyscan $(hostname -i) && ssh-keyscan 127.0.0.1 ) >> ~/.ssh/known_hosts
}

function setup_private_key() {
    [ -z "${SSH_PRIVATE_KEY}" ] && return 0

    mkdir -p /root/.ssh
    echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa

    chmod 600 /root/.ssh/id_rsa

    authorize_ssh_host
}

function run_init_scripts() {
    local init_dir=${1:-'/init.d'}

    [ -d ${init_dir} ] || return 0

    for script in $(ls ${init_dir} | sort -n); do
        local script_path=${init_dir}/${script}
        echo "Running $script_path"

        chmod +x ${init_dir}/${script} &&
        ${init_dir}/${script} || return 1
    done
}

function start_docker() {
    /usr/local/bin/dockerd-entrypoint.sh $@ &

    while [ ! -S /var/run/docker.sock ] ; do
        sleep 2
    done

    docker ps > /dev/null
}

function start_sshd() {
    /usr/sbin/sshd &&
    setup_public_key &&
    setup_private_key
}

case "no false 0" in
    *"${SSH_ENABLED:-true}"*)
        /usr/local/bin/dockerd-entrypoint.sh $@
        ;;
    *)
        start_docker $@ &&
            start_sshd &&
            run_init_scripts &&
            tail -f /dev/null
        ;;
esac
